name: 🧪 Continuous Integration

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - develop
      - 'feature/**'
      - 'hotfix/**'

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code Quality and Linting
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📋 Run ESLint
        run: |
          echo "🔍 Running ESLint..."
          npm run lint -- --format=compact
        continue-on-error: true

      - name: 🔍 Check TypeScript
        run: |
          echo "🔍 Running TypeScript compiler check..."
          npx tsc --noEmit
        continue-on-error: true

      - name: 📊 Code complexity analysis
        run: |
          echo "📊 Analyzing code complexity..."
          find src -name "*.tsx" -o -name "*.ts" | head -10 | xargs wc -l
          echo "Total TypeScript/JSX files: $(find src -name "*.tsx" -o -name "*.ts" | wc -l)"

  # Build and Test Frontend
  build-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build application
        run: |
          echo "🔨 Building with Node.js ${{ matrix.node-version }}..."
          npm run build
        env:
          NODE_ENV: production

      - name: 📦 Analyze bundle size
        run: |
          if [ -d "out" ]; then
            echo "📦 Bundle size analysis:"
            echo "Total size: $(du -sh out/ | cut -f1)"
            echo "JavaScript files:"
            find out -name "*.js" -type f -exec du -h {} + | sort -hr | head -5
            echo "CSS files:"
            find out -name "*.css" -type f -exec du -h {} + | sort -hr | head -5
          fi

      - name: 🧪 Test build artifacts
        run: |
          echo "🧪 Testing build artifacts..."
          # Check if critical files exist
          test -f out/index.html || exit 1
          test -d out/_next/static || exit 1
          echo "✅ Build artifacts are valid"

  # PHP API Testing
  api-tests:
    name: 🐘 API Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: json, curl, mbstring, fileinfo
          ini-values: error_reporting=E_ALL
          tools: composer
          coverage: none

      - name: 🔍 PHP Syntax Check
        run: |
          echo "🔍 Checking PHP syntax..."
          find api/ -name "*.php" -exec php -l {} \; | grep -v "No syntax errors"
          echo "✅ PHP syntax check completed"

      - name: 🧪 API Integration Tests
        run: |
          echo "🧪 Starting API server for testing..."
          cd api
          php -S localhost:8080 router.php &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 3
          
          echo "Testing API endpoints..."
          
          # Test products endpoint
          echo "📦 Testing products endpoint..."
          PRODUCTS_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:8080/api/products)
          echo "Products response: $PRODUCTS_RESPONSE"
          
          # Test brands endpoint
          echo "🏷️ Testing brands endpoint..."
          BRANDS_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:8080/api/brands)
          echo "Brands response: $BRANDS_RESPONSE"
          
          # Test categories endpoint
          echo "📂 Testing categories endpoint..."
          CATEGORIES_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:8080/api/categories)
          echo "Categories response: $CATEGORIES_RESPONSE"
          
          # Test texts endpoint
          echo "📝 Testing texts endpoint..."
          TEXTS_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:8080/api/texts/common)
          echo "Texts response: $TEXTS_RESPONSE"
          
          # Cleanup
          kill $SERVER_PID
          echo "✅ API tests completed"

  # Security Scanning
  security-check:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Scan for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Run npm audit
        run: |
          echo "🔒 Running npm security audit..."
          npm audit --audit-level=moderate || true
          echo "✅ Security audit completed"

      - name: 🔍 Check for common vulnerabilities
        run: |
          echo "🔍 Checking for common security issues..."
          
          # Check for hardcoded secrets patterns
          echo "Checking for potential secrets..."
          grep -r -i "password\|secret\|key\|token" src/ --include="*.ts" --include="*.tsx" || true
          
          # Check for dangerous functions
          echo "Checking for dangerous functions..."
          grep -r "eval\|innerHTML\|dangerouslySetInnerHTML" src/ --include="*.ts" --include="*.tsx" || true
          
          echo "✅ Security check completed"

  # Performance and Accessibility
  performance-check:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build for performance testing
        run: npx next build --no-lint

      - name: 🚀 Start server for testing
        run: |
          npm run serve &
          SERVER_PID=$!
          echo $SERVER_PID > server.pid
          sleep 5
        
      - name: ⚡ Run basic performance checks
        run: |
          echo "⚡ Running performance checks..."
          
          # Check response time
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" http://localhost:3000)
          echo "Response time: ${RESPONSE_TIME}s"
          
          # Check if response time is reasonable (less than 2 seconds)
          if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
            echo "✅ Response time is good"
          else
            echo "⚠️ Response time is slow"
          fi
        
      - name: 🧹 Cleanup server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

  # Dependency Check
  dependency-check:
    name: 📦 Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔍 Check for outdated dependencies
        run: |
          echo "🔍 Checking for outdated dependencies..."
          npm outdated || true
          echo "✅ Dependency check completed"

      - name: 📊 Dependency tree analysis
        run: |
          echo "📊 Analyzing dependency tree..."
          npm ls --depth=1 || true
          echo "Package count: $(npm ls --json --depth=0 2>/dev/null | jq '.dependencies | length' || echo 'N/A')"

  # Summary Report
  pr-summary:
    name: 📝 PR Summary
    runs-on: ubuntu-latest
    needs: [code-quality, build-test, api-tests, security-check]
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: 📝 Generate PR summary
        run: |
          echo "## 🚀 CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔨 Build & Test: ${{ needs.build-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🐘 API Tests: ${{ needs.api-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Security Check: ${{ needs.security-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.build-test.result }}" == "success" && "${{ needs.api-tests.result }}" == "success" ]]; then
            echo "### ✅ All checks passed! Ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Some checks failed. Please review before merging." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links:" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 [CMS Panel](http://localhost:3000/admin-panel-secret-cms-2024)" >> $GITHUB_STEP_SUMMARY
          echo "- 📡 [API Documentation](http://localhost:8080/api/)" >> $GITHUB_STEP_SUMMARY